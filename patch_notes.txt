Jan 30 2024
    getting code off my laptop
    NEW INFORMATION DISCOVERED
        the table of contents in HTML guides dont always work! switching over to a linear iterative way of getting
            links based on the pagination buttons on each individual guide page.

Jan 29 2024
    constants.py
        added "speed mode", which removes the delay when scraping (for testing)
        added friendly_file_name()
        SaveData can now 'delete' as a filetype
    get_console_links.py
        now saves a second CONSOLE_LINK_LIST_LOC for guide completion tracking purposes
    get_guides.py
        added a new metadata scraping function (to be renamed). metadata needs to be done in
            two parts, not everything can be filled out at once
    scraper_io.py
        deleted ABSOLUTE_PATH.
            no longer necessary to have both DATA_FOLDER and ABSOLUTE_PATH now that i always feed an absolute path
    progress_data_structures.py
        added link, incomplete, and award to GuideMetadata

Jan 27 2024
    I'm back. I want results
    General
        Deleting LinkStep data structure. It was redundant with FileStep, and just confusing me further. I know
        I've made a lot of little mistakes involving data management, but this is such an elegant (if not
        proper) fix that its hard to NOT do at this point
    progress_data_structure.py
        NamedNumber now actually compares to itself
            (i dont think NamedNumber actually does anything. it SHOULDN'T, but ill actually check later)
    constants.py
        cleaning up stupid random code, just use python its good
        added time_to_hms_string()
    main_gamefaqs_scraper.py
        adding time tracking. calculates how long the actual scraping takes, and how long was spent randomly
            waiting in fear of the scraper blocker
    get_console_links.py
        deleting old_run(), i forget why i kept it around i guess i dont need it no more

Jan 14 2024
    Today while testing (the longest test I ever conducted), I gamefaqs hit me with a "suspicious activity" page.
    Instead of elation at the progress made or that i was finally using the scraper at the pace and
    intention that it was designed forI am at the point where im very frustrated with what im doing. I hate
    my design. The longer i work on this, the more glaring the flaws become, and the past three days have
    been centered around fixing or mitigating some of them. I started this project to get a job in python,
    and yet I have no job, a poorly designed app, and staring at another form of rejection from
    www.gamefaqs.gamespot.com...the spell has ended. I'll probably continue this fool's errand, but it hurts
    more now.
    constants.py
        adding more user headers and a random timer between 13 and 30 seconds to all requests,
        in an attempt to dodge the scraper detectors
    get_console_links.py
        replaced run function, now saves progress and failure resilient
        saves pagination number for game tables to be used in get_game_links.py
    scraper_io.py
        added pkl_save_new(), unpickle_dict() because i did not understand how pickling worked when i wrote this file

Jan 13 2024
    General
        Removed the underscore from class names (im delaying real work)
    progress_data_structures.py
        more comments
    main_gamefaqs_scraper.py
        progress file now actually does something
    Notes
        I figured out how Keyword Parameters work (sorta)
        adjusted all of my annoying magic param functions to be more Keywordy (python is back on my good side)


Jan 12 2024
    General
        GUI.display added throughout the codebase, displays info to the UI
        GUI runs on its own thread, now can interact with the buttons while scraper is running
            Tkinter is NOT thread safe, the consequences of this have yet to manifest
        Threaded interruption added to most work files. should fail gracefully when hitting the button (and fail regular when closing)
    main_gamefaqs_scraper.py
        stripped the steps down into a shadow of their former self
            it was a good idea at first, but alas, now its barely more than a string list
    scraper_io.py
        added can_find_save_data
    constants.py
        removed force_save function
            replaced with force_save_pack a while ago
    get_console_links.py
        function comments added
        counting file added, for completion verification (probably unnecessary)
        verify_complete added (probably unnecessary) (tested ok)
        check_full_progress added
    get_game_links.py
        function comments added
        verify_complete added (probably unnecessary)
        check_full_progress added
    get_guides.py
        function comments added
        split Save_Data creation into multiple lines
            In the future, i would like to do this more "python-y," use a dictionary instead of random params and fields
        verify_complete added (probably unnecessary)
        check_full_progress added
    html_guide_manager.py
        added thread breaks
        split Save_Data creation into multiple lines
    gui_manager.py
        most ui elements are now their own var, so i can actually use them (dumbass)
        visual mostly finalized. looks like shit, but it works. tkinter has been pickier than i thought

Jan 7 2024
    adding a gui! its going ok! it's kinda almost done, and supposed to look kinda iffy,
    but having it there makes it look more real.

Jan 5 2024
    adding interruption notes, as in, tells you the progress when you quit the program
    progress_data_structures.py
        changing the structure of Main_Step to not include a function pointer cuz of pickling purposes
        should i convert all my modules to classes? the whole idea is they get pickled and copied.
        since time immemorium people have used plain text save files, but not reflection;
            not sure if this is bright idea or staggering inflexibility

Dec 29 2023
    progress_data_structures.py
        renamed Guide_Data -> Guide_Metadata
        added Page_Metadata class
            realized i needed extra metadata for each page of an html guide
    constants.py
        file saving is now CONCURRENT :sparkles:
    html_guide_manager.py
        used os.path.join in more places
        removing comments and test names

Dec 27 2023
    get_guides.py
        added threading for image downloading. wanna add it for file saving.
    scraper_io.py
        messed with saving, trying to remove the guesswork of 'where is the slash' with os.path.join
        this WILL have bugs. im not checking them now


Dec 26 2023
    so much stuff. been working on and off, never uploaded, never commented in the patch notes
    added html_guide_manager.py
        is just get_guides.py but for html guides
    coming along real well, got a lot of software-engineery things to do, but the features are all here now

Dec 3 2023
    get_guides.py updates
        run
            now tries to skip gamespot articles disguised as guides
        get_alias_save_data
            now returns a list of aliases, rather than one each time.
        get_guide_text
            finally starting the html guides. text guides now _should_ work with all guides
            css is going to be a strange problem. its saved as a version, a date, and a time. 
    progress_data_structures.py
        save_new_completion added, shortcut for updating _Steps data structures to True

Dec 1 2023
    get_guides.py filled out
        create_dl_steps added
            creates Link_Steps of all the guides associated with a game, downloads them in order
        get_guide_metadata added
            scrapes the guide text page for title, author, version, year, and platform
        get_alias_save_data added
            molds the game alias into a File_Step to overwrite in the {0}_game_list.pickle files
        get_guide_text added
            copies all parts of the guide text html
        run and test_run added
            test_run is a single guide download process, run is the real deal
            RUN NEEDS MORE TESTING
    Step data structures now only compare their names to see if they're equlivalent
        these steps are NOT UNIQUE, so this is actually a lie. should update in the future to have some sort of 'shallow equals'
    Added Guide_Data class
        holds guide data structure


Nov 27 2023
    I started adding a database system.
        its a mess. considering the save point system i made, its a little unnecessary, and i dont have actual access to the gamefaqs database, which means whatever database i have here is going to be a shallow imitation of the real one.
        storing dl'd data in a database has ramifications of needing a more complicated viewer than notepad, but the payment in "work experience" is vital
        its not done, and after going a little nuts, i called it off before continuing the pickle way
    deleted compress_games.py, didn't need it
    deleted scraper_vars.py, never needed it
    added get_guides.py
        coming along much slower than i would have wanted. needed to make decisions, solve problems
        one game can be feature in many different consoles with multiple names in different languages. how to only download the guides for a game once, rather than consoles by names times?
        solved, i think. get the game, get its aliases on page, get the guides, mark each console file with the game as complete
    get_console_links.py now saves a second console list file, for checking progress during guide downloading
    Author's note: This should have been a branch. I really just followed my passion here, without a care for structure or order.

Nov 21 2023
    Moved the "Elaborate "Thread" Locking System" into a generic, reusable function
    moving onto the part where i gotta start playing with BIG data, think i might need to do a database
    if i do a database tho, i implicitly need an actual user interface to see the guides.
    concered about whats next honestly. could just load up all the txt files sorted into alphabetical folders, 
        but there's a reason why web sites have crazy backends. need to research building a gui


Nov 17 2023
    added an elaborate "Thread" Locking System
        if this app isn't fetching web data, its writing files. and since this is designed to be stopped and re-run at any time (and this is taking up MOST OF THE WORK ON THIS PROJECT), I needed a way to guranatee that, when interruped, work wouldn't be lost, missing, or corrupt.
        pkl_io.py - added atomicwrites: pip module that claims to only write a file if all the data is applied
        get_game_links.py - Added force_save(): attempts to prevent keyboard interrupts with some cute loop-retrying functionality. will need to be expanded later. will still close the program if interrupted three times
    get_game_links.py - actually gets game links now! and saves them to their appropriate console! games are unique, there will be MANY duplicates and duplicate guides. this will also need work
    renamed web_consts.py -> constants.py
    added file locations to constants.py
        this allows the run_func pointers in the Main_Step class not require any parameters. any data each module needs is a constant, and lives in the appropriate file
        also allows the stupid 'previous_step' stuff in main_gamefaqs_scraper.py to be removed.
    I learned about the unpacking operator in python!


Nov 14 2023
    Added bizarre class in get_game_links thats supposed to block keyboard interrupts. will need to use later
    offloading more file io tedium into the actual file io module. this includes making sure files being created/read are in the right folder, have the right file suffix, and actually exist
    uncommenting things as I go in get_game_links. currently in a runnable state, doesn't actually save any links yet

Nov 9 2023
    Created progress_data_strctures.py
        probably the wrong name, but holds the classes that ultimately get written to pickle files
        split `Scraping_Step_Struct` into three steps: Main_Step, File_Step, and Link_Step
            furter revision will be necessary to these, but they're in a good place data-managment wise, even if they don't make much sense
    Created web_consts.py
        probably the wrong name, but holds the url pieces and common soup functions to be used all over the code
    Created get_game_links.py
        the next step in the scraping, finding the links of all the games associated with a system. ultimately, each game will be not really 
        be associated with its platform, but gotta start somewhere
    I have a linter in sublime now!! proper code styling here i come

    `test` var added to get_console_links.py. this file and step are nearly finalized
    added `unpickle` function to pkl_io.py


Nov 9 2023
    Step_Scraping_Struct makes use of function pointers. starting to understand modules...honestly wondering why python even has classes at this point

Nov 8 2023
    Further IO adjustments, mainly cleaning up the weird "check completion" style functions I left lying around
        added append_all_to_pkl()
    Split functions that did two things into their own specific functions. ex: check the progress file, but create it if it isn't there
    Progress file updates when steps complete

Nov 7 2023
    redid file reading and writing to make more sense
        added helper functions, no reading/writing is inline anymore
        moved io functions to a new file, pkl_io.py
    making the Scraping_Step_Struct more of a real object, for extensibility purposes
        gonna have to rename that in the future. pythoners must have some sort of agreed naming standard
    added a test function, will be useful going forward to not have to make web calls all the time to test
    TODO: update get_console_links.py to use pkl_io